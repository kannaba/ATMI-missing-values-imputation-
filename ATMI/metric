function [dissim_matrix,inter_cost_matrix,cpd] = mymetric( x , pm )

% initialize the dissimilarity matrices of each attribute
dissim_matrix = cell( 1 , pm.d ); 
for t = 1 : pm.d %
    dissim_matrix{ t } = zeros(max(pm.unique_values{t}),1);
end

%obtain conditional probability distributions 
cpd = cell( 1 , pm.d ); 
% obtain conditional probability distributions 
for t = 1:pm.d
    cpd{t} = cell(max(pm.unique_values{t}), pm.d); 
    for m_idx = 1:length(pm.unique_values{t}) 
        m = pm.unique_values{t}(m_idx);
        locate_x_tm = x(:, t) == m; 
        no_x_tm = sum(locate_x_tm); 
        if no_x_tm == 0
            continue;
        end

        % for the case the related attribute is nominal and ordinal and numerical
        for r = 1:pm.d 
            cpd{t}{m, r} = zeros(1, max(pm.unique_values{r})); 
            for g_idx = 1:length(pm.unique_values{r}) 
                g = pm.unique_values{r}(g_idx);
                if isnan(x(locate_x_tm, r)) 
                    continue;
                end 
                cpd{t}{m, r}(g) = sum(x(locate_x_tm, r) == g); 
            end
            cpd{t}{m, r} = cpd{t}{m, r} / no_x_tm;
        end
    end
end

%% directly compute the cost between attributes
% initialize the interdependence matrix
inter_cost_matrix = zeros( pm.d, pm.d );
% compute for the nominal case
%t-nominal ,r-no\or\nu
for t = 1 : pm.no_nom_att
    for m = 1 : max(pm.unique_values{t}) - 1 
        for h = m + 1 : max(pm.unique_values{t})
            cost_relate = zeros( 1 , pm.d ); 
            for r = 1 : pm.no_nom_att
                if isempty(cpd{t}{h, r}) || isempty(cpd{t}{m, r})
                    continue;
                end
                diff_relate = cpd{ t }{ h , r } - cpd{ t }{ m , r }; 
                cost_relate( r ) = sum( abs( diff_relate ) ) / 2;
            end
            
            for r = pm.no_nom_att + 1 : pm.d 
                if isempty(cpd{t}{h, r}) || isempty(cpd{t}{m, r})
                    continue;
                end
                diff_relate = cpd{ t }{ h , r } - cpd{ t }{ m , r }; 
                for s = 1 : max(pm.unique_values{r}) - 1 
                    cost_relate( r ) = cost_relate( r ) + abs( diff_relate( s ) );
                    diff_relate( s +1 ) = diff_relate( s ) + diff_relate( s +1 );    
                end 
                cost_relate( r ) = cost_relate( r ) / ( pm.no_values( r ) - 1 );
            end

            inter_cost_matrix( t , : ) = inter_cost_matrix( t , : ) + cost_relate;
        end
    end
    inter_cost_matrix( t , : ) = inter_cost_matrix( t , : ) / ( ( pm.no_values( t ) - 1 ) * pm.no_values( t ) / 2 ) ;
end

% compute for the ordinal case ,r-nomi\ordi\num
for t = pm.no_nom_att + 1 : pm.d
    for m = 1 : max(pm.unique_values{t}) - 1
        cost_relate = zeros( 1 , pm.d );
        
        for r = 1 : pm.no_nom_att % nominal case
            if isempty(cpd{ t }{ m + 1 , r }) || isempty(cpd{ t }{ m , r })
                continue;
            end
            diff_relate = cpd{ t }{ m + 1 , r } - cpd{ t }{ m , r };
            cost_relate( r ) = sum( abs( diff_relate ) ) / 2;
            cost_relate( r ) = cost_relate( r ) * ( 1 / ( pm.no_values( t ) - 1 ) );
        end

        for r = pm.no_nom_att + 1 : pm.d  % ordinal case &numerical case
            if isempty(cpd{ t }{ m + 1 , r }) || isempty(cpd{ t }{ m , r })
                continue;
            end
            diff_relate = cpd{ t }{ m + 1 , r } - cpd{ t }{ m , r };
            for s = 1 : max(pm.unique_values{r}) - 1
                cost_relate( r ) = cost_relate( r ) + abs( diff_relate( s ) );
                diff_relate( s +1 ) = diff_relate( s ) + diff_relate( s +1 );
            end
            cost_relate( r ) = cost_relate( r ) / ( max(pm.unique_values{r}) - 1 );  
            cost_relate( r ) = cost_relate( r ) * ( 1 / ( max(pm.unique_values{t}) - 1 ) );          
        end 
        inter_cost_matrix( t , : ) = inter_cost_matrix( t , : ) + cost_relate;
    end
end

%% directly compute the dis matrix
% for the case the target attribute is nominal
for t = 1 : pm.no_nom_att
    for m = 1 : max(pm.unique_values{t}) - 1
        for h = m + 1 : max(pm.unique_values{t})
            cost_relate = zeros( 1 , pm.d );

            for r = 1 : pm.no_nom_att %nominal case
                if isempty(cpd{ t }{ h , r }) || isempty(cpd{ t }{ m , r })
                    continue;
                end
                diff_relate = cpd{ t }{ h , r } - cpd{ t }{ m , r };
                cost_relate( r ) = sum( abs( diff_relate ) ) / 2;
            end

            for r = pm.no_nom_att + 1 : pm.d  % ordinal case &numerical case
                if isempty(cpd{ t }{ h , r }) || isempty(cpd{ t }{ m , r })
                    continue;
                end
                diff_relate = cpd{ t }{ h , r } - cpd{ t }{ m , r };
                for s = 1 : max(pm.unique_values{r}) - 1
                    cost_relate( r ) = cost_relate( r ) + abs( diff_relate( s ) );
                    diff_relate( s +1 ) = diff_relate( s ) + diff_relate( s +1 );
                end
                cost_relate( r ) = cost_relate( r ) / ( pm.no_values( r ) - 1 );
            end
            dissim_matrix{ t }( m , h ) = mean( cost_relate .* inter_cost_matrix( t , : ) );
            dissim_matrix{ t }( h , m ) = dissim_matrix{ t }( m , h );        
        end
    end
end
% for the case the target attribute is ordinal or numerical 
for t = pm.no_nom_att + 1 : pm.d 
     dissim_vct = zeros( 1 , max(pm.unique_values{t}) - 1 );
    for m = 1 : max(pm.unique_values{t}) - 1
        cost_relate = zeros( 1 , pm.d );

        for r = 1 : pm.no_nom_att%nominal case
            if isempty(cpd{ t }{ m + 1 , r }) || isempty(cpd{ t }{ m , r })
                continue;
            end
            diff_relate = cpd{ t }{ m + 1 , r } - cpd{ t }{ m , r };
            cost_relate( r ) = ( sum( abs( diff_relate ) ) / 2 );
            cost_relate( r ) = cost_relate( r ) * ( 1 / ( pm.no_values( t ) - 1 ) );
        end
        for r = pm.no_nom_att + 1 : pm.d % ordinal case
            if isempty(cpd{ t }{ m + 1 , r }) || isempty(cpd{ t }{ m , r })
                continue;
            end            
            diff_relate = cpd{ t }{ m + 1 , r } - cpd{ t }{ m , r };
            for s = 1 : pm.no_values( r ) - 1
                cost_relate( r ) = cost_relate( r ) + abs( diff_relate( s ) );
                diff_relate( s +1 ) = diff_relate( s ) + diff_relate( s +1 );
            end
            cost_relate( r ) = cost_relate( r ) / ( pm.no_values( r ) - 1 );
            cost_relate( r ) = cost_relate( r ) * ( 1 / ( pm.no_values( t ) - 1 ) );
        end
        dissim_vct( m ) = mean( cost_relate .* inter_cost_matrix( t , : ) );
    end

    for m = 1 : max(pm.unique_values{t}) - 1
        for h = m + 1 :  max(pm.unique_values{t})
            dissim_matrix{ t }( m , h ) = sum( dissim_vct( m : h - 1 ) );
            dissim_matrix{ t }( h , m ) = dissim_matrix{ t }( m , h );
        end
    end
end

for t = pm.no_nom_att + 1 : pm.d
    dissim_matrix{ t } = dissim_matrix{ t } / max( max( ( dissim_matrix{ t } ) ) ) ;
end
end
